openapi: 3.0.3
info:
  title: Customer API
  version: 1.0.0
servers:
  - url: "https://api.meowmed.de/customer"
paths:
  /apply:
    post:
      operationId: createApplication
      summary: New Customer can apply for a new contract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationReq"
      responses:
        "201":
          description: "Application created"
          content:
            text/plain:
              schema:
                type: string
                example: Application created
        "400":
          description: "Application created"
          content:
            text/plain:
              schema:
                type: string
                example: Error creating application
  /rate:
    post:
      operationId: calculateRate
      summary: Calculate rate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateCalculationReq"
      responses:
        "200":
          description: Rate calculated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateRes"
components:
  schemas:
    ApplicationReq:
      type: object
      properties:
        customer:
          $ref: "#/components/schemas/CustomerReq"
        contract:
          $ref: "#/components/schemas/Contract"
    CustomerReq:
      type: object
      required:
        - firstName
        - lastName
        - birthDate
        - socialSecurityNumber
        - taxId
        - address
        - bankDetails
        - email
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
          pattern: "^[A-Za-zßÄÖÜäöü]+(?: [A-Za-zßÄÖÜäöü]+)*$"
          example: "Max"
        lastName:
          type: string
          pattern: "^[A-Za-zßÄÖÜäöü]+(?: [A-Za-zßÄÖÜäöü]+)*$"
          example: "Mustermann"
        title:
          $ref: "#/components/schemas/Title"
        birthDate:
          type: string
          format: date
        socialSecurityNumber:
          type: string
          pattern: "^[0-9]{8}[A-Za-z][0-9]{3}$"
          example: "12345678A901"
        taxId:
          type: string
          pattern: "^[0-9]{11}$"
          example: "12345678901"
        address:
          $ref: "#/components/schemas/Address"
        bankDetails:
          $ref: "#/components/schemas/BankDetails"
    Contract:
      type: object
      required:
        - startDate
        - endDate
        - coverage
        - catName
        - breed
        - color
        - birthDate
        - neutered
        - personality
        - environment
        - weight
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        coverage:
          type: number
          minimum: 1
          example: 50000
        catName:
          type: string
          pattern: "^[A-Za-zßÄÖÜäöü]+(?: [A-Za-zßÄÖÜäöü]+)*$"
          example: "Minka"
        breed:
          $ref: "#/components/schemas/Breed"
        color:
          $ref: "#/components/schemas/Color"
        birthDate:
          type: string
          format: date
        neutered:
          type: boolean
        personality:
          $ref: "#/components/schemas/Personality"
        environment:
          $ref: "#/components/schemas/Environment"
        weight:
          type: number
          minimum: 50
          description: "In Gramm"
    Address:
      type: object
      required:
        - street
        - houseNumber
        - zipCode
        - city
      properties:
        street:
          type: string
          pattern: "^[A-Za-zßÄÖÜäöü]+(?: [A-Za-zßÄÖÜäöü]+)*$"
          example: "Beispielstrasse"
        houseNumber:
          type: string
          pattern: "^[0-9]{1,3}[A-Za-z]?$"
          example: 42
        zipCode:
          type: number
          minimum: 0
          maximum: 99999
          example: 12345
        city:
          type: string
          pattern: "^[A-Za-zßÄÖÜäöü]+(?: [A-Za-zßÄÖÜäöü]+)*$"
          example: "Musterstadt"
    BankDetails:
      type: object
      required:
        - iban
        - bic
        - name
      properties:
        iban:
          type: string
          pattern: "^[A-Z]{2}[0-9]{2}(?:[ ]?[0-9]{4}){4}(?:[ ]?[0-9]{1,2})?$"
          example: "DE89 3704 0044 0532 0130 00"
        bic:
          type: string
          pattern: "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$"
          example: INGDDEFFXXX
        name:
          type: string
          pattern: "^[A-Za-zßÄÖÜäöü]+(?: [A-Za-zßÄÖÜäöü]+)*$"
          example: "Max Mustermann"
    RateCalculationReq:
      type: object
      required:
        - coverage
        - breed
        - color
        - birthDate
        - neutered
        - personality
        - environment
        - weight
        - zipCode
      properties:
        coverage:
          type: number
          minimum: 1
          example: 50000
        breed:
          $ref: "#/components/schemas/Breed"
        color:
          $ref: "#/components/schemas/Color"
        birthDate:
          type: string
          format: date
        neutered:
          type: boolean
        personality:
          $ref: "#/components/schemas/Personality"
        environment:
          $ref: "#/components/schemas/Environment"
        weight:
          type: number
          minimum: 50
          description: "In Gramm"
        zipCode:
          type: number
          minimum: 0
          maximum: 99999
    RateRes:
      type: object
      properties:
        rate:
          type: number
          minimum: 0
          maximum: 99999
    Breed:
      type: string
      enum:
        - Bengal
        - Siamese
        - Perser
        - Maine Coon
        - Sphynx
        - Scottish Fold
        - British Shorthair
        - Abyssinian
        - Ragdoll
    Color:
      type: string
      enum:
        - Schwarz
        - Weiß
        - Grau
        - Blau
        - Seal
        - Lilac
        - Creme
        - Schildpatt
        - Braun
        - Rot
        - Zimt
    Environment:
      type: string
      enum:
        - Drinnen
        - Draußen
    Personality:
      type: string
      enum:
        - Spielerisch
        - Anhänglich
    Title:
      type: string
      enum:
        - "Dr."
        - "Prof. Dr."
        - "Dr. Dr."
        - "Prof. Dr. Dr"
