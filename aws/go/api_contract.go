/*
 * Cat Insurance API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContractAPIController binds http requests to an api service and writes the service results to the http response
type ContractAPIController struct {
	service      ContractAPIServicer
	errorHandler ErrorHandler
}

// ContractAPIOption for how the controller is set up.
type ContractAPIOption func(*ContractAPIController)

// WithContractAPIErrorHandler inject ErrorHandler into controller
func WithContractAPIErrorHandler(h ErrorHandler) ContractAPIOption {
	return func(c *ContractAPIController) {
		c.errorHandler = h
	}
}

// NewContractAPIController creates a default api controller
func NewContractAPIController(s ContractAPIServicer, opts ...ContractAPIOption) Router {
	controller := &ContractAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContractAPIController
func (c *ContractAPIController) Routes() Routes {
	return Routes{
		"CalculateRate": Route{
			strings.ToUpper("Post"),
			"/v1/contracts/rate",
			c.CalculateRate,
		},
		"CreateContract": Route{
			strings.ToUpper("Post"),
			"/v1/contracts",
			c.CreateContract,
		},
		"GetContract": Route{
			strings.ToUpper("Get"),
			"/v1/contracts/{contractId}",
			c.GetContract,
		},
		"GetCustomerContracts": Route{
			strings.ToUpper("Get"),
			"/v1/customers/{customerId}/contracts",
			c.GetCustomerContracts,
		},
		// "": Route{
		// 	strings.ToUpper("Options"),
		// 	"/v1/contracts",
		// 	c.Options,
		// },
	}
}

// func (c *ContractAPIController) Options(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Allow", "GET, POST, PUT, DELETE, OPTIONS, PATCH")
// 	w.WriteHeader(http.StatusNoContent)
// }

// CalculateRate - Calculate rate
func (c *ContractAPIController) CalculateRate(w http.ResponseWriter, r *http.Request) {
	rateCalculationReqParam := RateCalculationReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&rateCalculationReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRateCalculationReqRequired(rateCalculationReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRateCalculationReqConstraints(rateCalculationReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CalculateRate(r.Context(), rateCalculationReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateContract - Create a new contract
func (c *ContractAPIController) CreateContract(w http.ResponseWriter, r *http.Request) {
	contractReqParam := ContractReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&contractReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertContractReqRequired(contractReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertContractReqConstraints(contractReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateContract(r.Context(), contractReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetContract -
func (c *ContractAPIController) GetContract(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	contractIdParam := params["contractId"]
	if contractIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"contractId"}, nil)
		return
	}
	result, err := c.service.GetContract(r.Context(), contractIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomerContracts - Get customer contracts
func (c *ContractAPIController) GetCustomerContracts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	customerIdParam := params["customerId"]
	if customerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"customerId"}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetCustomerContracts(r.Context(), customerIdParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
