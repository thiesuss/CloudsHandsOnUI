/*
 * Cat Insurance API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomerAPIController binds http requests to an api service and writes the service results to the http response
type CustomerAPIController struct {
	service      CustomerAPIServicer
	errorHandler ErrorHandler
}

// CustomerAPIOption for how the controller is set up.
type CustomerAPIOption func(*CustomerAPIController)

// WithCustomerAPIErrorHandler inject ErrorHandler into controller
func WithCustomerAPIErrorHandler(h ErrorHandler) CustomerAPIOption {
	return func(c *CustomerAPIController) {
		c.errorHandler = h
	}
}

// NewCustomerAPIController creates a default api controller
func NewCustomerAPIController(s CustomerAPIServicer, opts ...CustomerAPIOption) Router {
	controller := &CustomerAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomerAPIController
func (c *CustomerAPIController) Routes() Routes {
	return Routes{
		"SearchCustomers": Route{
			strings.ToUpper("Get"),
			"/v1/customers/search",
			c.SearchCustomers,
		},
		"CreateCustomer": Route{
			strings.ToUpper("Post"),
			"/v1/customers",
			c.CreateCustomer,
		},
		"DeleteCustomer": Route{
			strings.ToUpper("Delete"),
			"/v1/customers/{customerId}",
			c.DeleteCustomer,
		},
		"GetCustomer": Route{
			strings.ToUpper("Get"),
			"/v1/customers/{customerId}",
			c.GetCustomer,
		},
		"GetCustomers": Route{
			strings.ToUpper("Get"),
			"/v1/customers",
			c.GetCustomers,
		},
		"UpdateCustomer": Route{
			strings.ToUpper("Patch"),
			"/v1/customers/{customerId}",
			c.UpdateCustomer,
		},
		// "": Route{
		// 	strings.ToUpper("Options"),
		// 	"/v1/customers",
		// 	c.Options,
		// },
	}
}

// func (c *CustomerAPIController) Options(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Allow", "GET, POST, PUT, DELETE, OPTIONS, PATCH")
// 	w.WriteHeader(http.StatusNoContent)
// }

// CreateCustomer - Create a new customer
func (c *CustomerAPIController) CreateCustomer(w http.ResponseWriter, r *http.Request) {
	customerReqParam := CustomerReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customerReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomerReqRequired(customerReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomerReqConstraints(customerReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCustomer(r.Context(), customerReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCustomer - Delete a customer
func (c *CustomerAPIController) DeleteCustomer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customerIdParam := params["customerId"]
	if customerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"customerId"}, nil)
		return
	}
	result, err := c.service.DeleteCustomer(r.Context(), customerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomer - Get customer details
func (c *CustomerAPIController) GetCustomer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customerIdParam := params["customerId"]
	if customerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"customerId"}, nil)
		return
	}
	result, err := c.service.GetCustomer(r.Context(), customerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomers - Get all customers
func (c *CustomerAPIController) GetCustomers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetCustomers(r.Context(), pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchCustomers - Search for customers
func (c *CustomerAPIController) SearchCustomers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var textParam string
	if query.Has("text") {
		param := query.Get("text")

		textParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "text"}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		pageParam = 1
	}

	var pageSizeParam int32 
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](100),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		pageSizeParam = 100
	}
	result, err := c.service.SearchCustomers(r.Context(), textParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	// Perform a type assertion to slice of whatever type you expect, e.g., []Customer
	customers, ok := result.Body.([]CustomerRes) // Adjust the type Customer to whatever type you expect
	if ok && len(customers) == 0 {
		EncodeJSONResponse([]CustomerRes{}, &result.Code, w) // Adjust the type Customer if necessary
		return
	}

	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCustomer - Update a customer
func (c *CustomerAPIController) UpdateCustomer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customerIdParam := params["customerId"]
	if customerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"customerId"}, nil)
		return
	}
	customerReqParam := CustomerReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customerReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomerReqRequired(customerReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomerReqConstraints(customerReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCustomer(r.Context(), customerIdParam, customerReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
